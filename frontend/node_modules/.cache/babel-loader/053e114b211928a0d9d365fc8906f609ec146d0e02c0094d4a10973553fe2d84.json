{"ast":null,"code":"import axios from 'axios';\nimport { getAuth } from \"firebase/auth\";\nimport { firebaseApp } from './firebase';\nconst auth = getAuth(firebaseApp);\nconst api = axios.create({\n  baseURL: 'http://localhost:8080'\n});\n\n// Request interceptor to attach Firebase ID token (if available)\napi.interceptors.request.use(async config => {\n  const user = auth.currentUser;\n  if (user) {\n    const token = await user.getIdToken();\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\nexport default api;","map":{"version":3,"names":["axios","getAuth","firebaseApp","auth","api","create","baseURL","interceptors","request","use","config","user","currentUser","token","getIdToken","headers","Authorization","error","Promise","reject"],"sources":["/workspaces/StudBuds/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\nimport { getAuth } from \"firebase/auth\";\nimport { firebaseApp } from './firebase';\n\nconst auth = getAuth(firebaseApp);\n\nconst api = axios.create({\n  baseURL: 'http://localhost:8080'\n});\n\n// Request interceptor to attach Firebase ID token (if available)\napi.interceptors.request.use(\n  async config => {\n    const user = auth.currentUser;\n    if (user) {\n      const token = await user.getIdToken();\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  error => Promise.reject(error)\n);\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,eAAe;AACvC,SAASC,WAAW,QAAQ,YAAY;AAExC,MAAMC,IAAI,GAAGF,OAAO,CAACC,WAAW,CAAC;AAEjC,MAAME,GAAG,GAAGJ,KAAK,CAACK,MAAM,CAAC;EACvBC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAC1B,MAAMC,MAAM,IAAI;EACd,MAAMC,IAAI,GAAGR,IAAI,CAACS,WAAW;EAC7B,IAAID,IAAI,EAAE;IACR,MAAME,KAAK,GAAG,MAAMF,IAAI,CAACG,UAAU,CAAC,CAAC;IACrCJ,MAAM,CAACK,OAAO,CAACC,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOH,MAAM;AACf,CAAC,EACDO,KAAK,IAAIC,OAAO,CAACC,MAAM,CAACF,KAAK,CAC/B,CAAC;AAED,eAAeb,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}